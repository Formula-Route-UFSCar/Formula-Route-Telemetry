Index: src/main/java/com/formula/frames/controller/MainFrameController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\r\n * MIT License\r\n *\r\n * Copyright (c)2023 Matheus Markies\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in all\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\npackage com.formula.frames.controller;\r\n\r\nimport com.formula.frames.controller.popup.ConnectPopUpController;\r\nimport com.formula.manager.utilities.XLS;\r\nimport com.formula.objects.WheelSensor;\r\nimport com.formula.serialport.SerialReadder;\r\nimport javafx.application.Platform;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.fxml.Initializable;\r\nimport javafx.scene.Parent;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.chart.LineChart;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.control.MenuBar;\r\nimport javafx.scene.control.MenuItem;\r\nimport javafx.scene.image.Image;\r\nimport javafx.scene.image.ImageView;\r\nimport javafx.scene.layout.AnchorPane;\r\nimport javafx.stage.Stage;\r\nimport lombok.*;\r\n\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.net.URL;\r\nimport java.util.ArrayList;\r\nimport java.util.ResourceBundle;\r\nimport java.util.concurrent.Executors;\r\nimport java.util.concurrent.ScheduledExecutorService;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\n@Getter @Setter @NoArgsConstructor @AllArgsConstructor @EqualsAndHashCode\r\npublic class MainFrameController{\r\n    private SerialReadder serialReadder;\r\n    private ArrayList<WheelSensor> dataList = new ArrayList<>();\r\n\r\n    @FXML\r\n    private ResourceBundle resources;\r\n\r\n    @FXML\r\n    private URL location;\r\n\r\n    @FXML\r\n    private MenuItem connect_menu_button;\r\n\r\n    @FXML\r\n    private MenuItem debug_menu_button;\r\n\r\n    @FXML\r\n    private MenuBar menu_bar;\r\n\r\n    @FXML\r\n    private Button pdfGeneratorButton;\r\n\r\n    @FXML\r\n    private ImageView pitch_car_image;\r\n\r\n    @FXML\r\n    private ImageView roll_car_image;\r\n\r\n    @FXML\r\n    private ImageView yaw_car_image;\r\n\r\n    @FXML\r\n    void OnClickInPdfGenerator(ActionEvent event) {\r\n        System.out.println(dataList.size());\r\n        try {\r\n            XLS.createXLSFile(dataList);\r\n        } catch (IOException e) {\r\n            System.err.println(e);\r\n        }\r\n    }\r\n\r\n    @FXML\r\n    void onClickInConnectButton(ActionEvent event) {\r\n        openConnectPopUp();\r\n    }\r\n\r\n    @FXML\r\n    void onClickInDebugButton(ActionEvent event) {\r\n\r\n    }\r\n\r\n    @FXML\r\n    void initialize() {\r\n        assert connect_menu_button != null : \"fx:id=\\\"connect_menu_button\\\" was not injected: check your FXML file 'MainFrame.fxml'.\";\r\n        assert debug_menu_button != null : \"fx:id=\\\"debug_menu_button\\\" was not injected: check your FXML file 'MainFrame.fxml'.\";\r\n        assert menu_bar != null : \"fx:id=\\\"menu_bar\\\" was not injected: check your FXML file 'MainFrame.fxml'.\";\r\n        assert pitch_car_image != null : \"fx:id=\\\"pitch_car_image\\\" was not injected: check your FXML file 'MainFrame.fxml'.\";\r\n        assert roll_car_image != null : \"fx:id=\\\"roll_car_image\\\" was not injected: check your FXML file 'MainFrame.fxml'.\";\r\n        assert yaw_car_image != null : \"fx:id=\\\"yaw_car_image\\\" was not injected: check your FXML file 'MainFrame.fxml'.\";\r\n\r\n        //setImageToImageView(\"/com/formula/images/yawaxis.jpg\", yaw_car_image);\r\n        //setImageToImageView(\"/com/formula/images/rollaxis.jpg\", roll_car_image);\r\n        //setImageToImageView(\"/com/formula/images/pitchaxis.jpg\", pitch_car_image\r\n\r\n        serialReadder = new SerialReadder();\r\n        ScheduledExecutorService scheduledExecutorService;\r\n        scheduledExecutorService = Executors.newSingleThreadScheduledExecutor();\r\n\r\n        scheduledExecutorService.scheduleAtFixedRate(() -> {\r\n            Platform.runLater(() -> {\r\n\r\n            });\r\n        }, 0, 100, TimeUnit.MILLISECONDS);\r\n    }\r\n\r\n    void setImageToImageView(String path, ImageView imageView){\r\n        File file = new File(path);\r\n        Image image = new Image(file.toURI().toString());\r\n        imageView.setImage(image);\r\n    }\r\n\r\n    void openConnectPopUp(){\r\n        try {\r\n            FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource(\r\n                    \"/com/formula/ConnectPopUp.fxml\"));\r\n            Parent root = fxmlLoader.load();\r\n\r\n            ConnectPopUpController connectPopUpController = (ConnectPopUpController)fxmlLoader.getController();\r\n\r\n            connectPopUpController.setController(this);\r\n            connectPopUpController.setSerialReadder(this.serialReadder);\r\n\r\n            Stage stage = new Stage();\r\n            stage.setTitle(\"Conectar\");\r\n            stage.setScene(new Scene(root));\r\n\r\n            stage.show();\r\n        } catch (IOException ignored) {\r\n            System.err.println(ignored);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    protected Object clone() throws CloneNotSupportedException {\r\n        return super.clone();\r\n    }\r\n\r\n    public ArrayList<WheelSensor> getDataList() {\r\n        return dataList;\r\n    }\r\n\r\n    public void setDataList(ArrayList<WheelSensor> dataList) {\r\n        this.dataList = dataList;\r\n    }\r\n\r\n    @Override\r\n    protected void finalize() throws Throwable {\r\n        super.finalize();\r\n    }\r\n}\r\n
===================================================================
diff --git a/src/main/java/com/formula/frames/controller/MainFrameController.java b/src/main/java/com/formula/frames/controller/MainFrameController.java
--- a/src/main/java/com/formula/frames/controller/MainFrameController.java	
+++ b/src/main/java/com/formula/frames/controller/MainFrameController.java	
@@ -127,7 +127,7 @@
             Platform.runLater(() -> {
 
             });
-        }, 0, 100, TimeUnit.MILLISECONDS);
+        }, 0, 120, TimeUnit.MILLISECONDS);
     }
 
     void setImageToImageView(String path, ImageView imageView){
